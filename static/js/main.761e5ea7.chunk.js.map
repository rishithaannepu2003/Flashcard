{"version":3,"sources":["utils/api/index.js","components/Breadcrumbs/index.js","components/CardForm/index.js","components/AddCard/index.js","components/CreateDeck/index.js","hooks/useForm.js","components/DeckList/Deck.js","components/DeckList/index.js","components/EditCard/index.js","components/EditDeck/index.js","components/Header/index.js","components/NotFound/index.js","components/StudyDeck/index.js","components/Card/index.js","components/ViewDeck/index.js","App.js","index.js"],"names":["API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","signal","createDeck","method","body","JSON","stringify","readDeck","deckId","updateDeck","updatedDeck","id","deleteDeck","createCard","card","Number","readCard","cardId","updateCard","updatedCard","deleteCard","append","BreadCrumbs","crumbs","breadCrumbs","map","crumb","i","length","className","to","CardForm","handleSubmit","handleExit","front","setFront","back","setBack","buttonTextOne","buttonTextTwo","onSubmit","type","value","placeholder","onChange","e","target","required","onClick","AddCard","useState","setDeck","useParams","history","useHistory","useEffect","abortController","AbortController","then","catch","log","abort","preventDefault","goBack","CreateDeck","initialValues","values","setValues","useForm","description","handleChange","res","here","push","Deck","handleDelete","DeckList","decks","setDecks","window","confirm","location","reload","controller","listDecks","listOfDecks","EditCard","deckName","setDeckName","data","parseInt","EditDeck","deckDescription","setDeckDescription","Header","NotFound","StudyDeck","selectedCard","setSelectedCard","isFlipped","setIsFlipped","selectedIndex","setSelectedIndex","frontCard","backCard","Card","ViewDeck","setCards","App","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.761e5ea7.chunk.js","sourcesContent":["/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n/**\n * Breadcrumb navigation bar\n * Includes link to Home screen & so\n */\n\nconst BreadCrumbs = ({ crumbs }) => {\n  const breadCrumbs = crumbs.map((crumb, i) => {\n    if (i === crumbs.length - 1) {\n      return (\n        <li\n          key={crumb + i}\n          className=\"breadcrumb-item active\"\n          aria-current=\"page\"\n        >\n          {crumb}\n        </li>\n      );\n    } else {\n      return (\n        <li key={crumb + i} className=\"breadcrumb-item\">\n          <Link to=\"#\">{crumb}</Link>\n        </li>\n      );\n    }\n  });\n  return (\n    <nav aria-label=\"breadcrumb\">\n      <ol className=\"breadcrumb\">\n        <li className=\"breadcrumb-item\">\n          <Link to=\"/\">Home</Link>\n        </li>\n        {breadCrumbs}\n      </ol>\n    </nav>\n  );\n};\n\nexport default BreadCrumbs;\n","import React from \"react\";\n\n/**\n * Card form to edit or create card\n * Required for Edit & Create card screens to share same form component\n */\n\nconst CardForm = ({\n  handleSubmit,\n  handleExit,\n  front,\n  setFront,\n  back,\n  setBack,\n  buttonTextOne,\n  buttonTextTwo,\n}) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"form-group\">\n        <label>Front</label>\n        <textarea\n          className=\"form-control\"\n          type=\"textarea\"\n          name=\"front\"\n          value={front}\n          placeholder={\"Front side of card\"}\n          onChange={(e) => {\n            setFront(e.target.value);\n          }}\n          required\n        />\n        <label className=\"mx-1 my-1\">Back</label>\n        <textarea\n          className=\"form-control\"\n          name=\"back\"\n          value={back}\n          placeholder=\"Back side of card\"\n          type=\"textarea\"\n          onChange={(e) => {\n            setBack(e.target.value);\n          }}\n          required\n        />\n        <div className=\"buttons my-2\">\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary mx-1\"\n            onClick={handleExit}\n          >\n            {buttonTextOne}\n          </button>\n          <button type=\"submit\" className=\"btn btn-primary\">\n            {buttonTextTwo}\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default CardForm;\n","import React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { createCard, readDeck } from \"../../utils/api\";\nimport BreadCrumbs from \"../Breadcrumbs\";\nimport CardForm from \"../CardForm\";\n\n/**\n * Add card screen is displayed at '/decks/:deckId/cards/new'\n * Allows user to add new card to an existing deck using form\n * Shares the same form component w/Edit card screen\n */\n\nconst AddCard = () => {\n  // initialize deck + setter to hold card\n  const [deck, setDeck] = useState({ name: \"\" });\n  // initialize deck + setter to hold front of card\n  const [front, setFront] = useState(\"\");\n  // initialize deck + setter to hold front of card\n  const [back, setBack] = useState(\"\");\n\n  // retrieves deck w/specified `deckId`\n  const { deckId } = useParams();\n  const history = useHistory(); // create history obj\n\n  // use readDeck() to get deck & set to state\n  useEffect(() => {\n    const abortController = new AbortController();\n    readDeck(deckId)\n      .then(setDeck)\n      .catch((error) => console.log(error));\n\n    return abortController.abort();\n  }, [deckId, setDeck]);\n\n  // func to handle 'save' of form to add new card\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n\n    await createCard(deckId, { front, back }, signal);\n    setFront(\"\");\n    setBack(\"\");\n  };\n\n  // func to handle 'done' of form to add new card\n  const handleDone = () => {\n    history.goBack();\n  };\n\n  return (\n    <div>\n      <BreadCrumbs crumbs={[deck.name, \"Add Card\"]} />\n      <h2>{deck.name}: Add Card</h2>\n      <CardForm\n        handleSubmit={handleSubmit}\n        handleExit={handleDone}\n        front={front}\n        setFront={setFront}\n        back={back}\n        setBack={setBack}\n        buttonTextOne={\"Done\"}\n        buttonTextTwo={\"Save\"}\n      />\n    </div>\n  );\n};\n\nexport default AddCard;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useForm } from \"../../hooks/useForm\";\nimport { createDeck } from \"../../utils/api\";\nimport BreadCrumbs from \"../Breadcrumbs\";\n\n/**\n * Create deck screen is displayed at 'decks/new'\n * The Home screen has a 'Create Deck' btn\n * Allows user to create new deck\n * Includes a form w/ fields to create a new deck\n */\n\nconst CreateDeck = () => {\n  // used custom hook for form\n  const [values, handleChange] = useForm({ name: \"\", description: \"\" });\n\n  const history = useHistory(); // create history obj\n\n  // func to handle submission of form to create new deck\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n\n    const res = await createDeck(values, signal);\n    console.log({ here: \"here\" });\n    history.push(`/decks/${res.id}`);\n  };\n\n  // func to handle cancellation of form to create new deck\n  const handleCancel = () => {\n    history.push(\"/\");\n  };\n\n  return (\n    <div>\n      <BreadCrumbs crumbs={[\"Create Deck\"]} />\n      <h2>Create Deck</h2>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label>Name</label>\n          <input\n            className=\"form-control\"\n            type=\"text\"\n            name=\"name\"\n            value={values.name}\n            placeholder={\"Enter Deck Name\"}\n            onChange={handleChange}\n            required\n          />\n          <label className=\"mx-1 my-1\">Description</label>\n          <textarea\n            className=\"form-control\"\n            name=\"description\"\n            value={values.description}\n            placeholder=\"Brief Description of the deck\"\n            type=\"textarea\"\n            onChange={handleChange}\n            required\n          />\n          <div className=\"buttons my-2\">\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary mx-1\"\n              onClick={handleCancel}\n            >\n              Cancel\n            </button>\n            <button type=\"submit\" className=\"btn btn-primary\">\n              Submit\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default CreateDeck;\n","import { useState } from \"react\";\n\nexport const useForm = (initialValues) => {\n  const [values, setValues] = useState(initialValues);\n\n  return [\n    values,\n    (e) => {\n      setValues({ ...values, [e.target.name]: e.target.value });\n    },\n  ];\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Deck = ({ deck, handleDelete }) => {\n  return (\n    <div className=\"card mb-1\" key={deck.id}>\n      <div className=\"card-body\">\n        <h5 className=\"d-inline-block card-title\">{deck.name}</h5>\n        <h6 className=\"d-inline-block card-subtitle text-muted float-right margin-top\">\n          {deck.cards.length} cards\n        </h6>\n        <p className=\"card-text\">{deck.description}</p>\n        <Link to={`/decks/${deck.id}`}>\n          <button type=\"button\" className=\"btn btn-secondary mr-2\">\n            View\n          </button>\n        </Link>\n        <Link to={`/decks/${deck.id}/study`}>\n          <button type=\"button\" className=\"btn btn-primary mr-2\">\n            Study\n          </button>\n        </Link>\n        <button\n          className=\"btn btn-danger float-right margin-bottom\"\n          onClick={() => handleDelete(deck.id)}\n        >\n          Delete\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Deck;\n","// * HOME SCREEN DISPLAYS DECK LIST * //\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useParams, useHistory } from \"react-router-dom\";\nimport { listDecks, deleteDeck } from \"../../utils/api\";\nimport Deck from \"./Deck\";\n\nconst DeckList = () => {\n  // useState Hook for deck list\n  const [decks, setDecks] = useState([]);\n  const { deckId } = useParams();\n  // use Hook to send user home\n  const history = useHistory();\n\n  // Delete handler either deletes deck & reload OR sends user home\n  const handleDelete = (deckId) => {\n    const message = \"Are you sure you want to delete?\";\n    const deleteDeckPrompt = window.confirm(message);\n\n    if (deleteDeckPrompt) {\n      deleteDeck(deckId) && window.location.reload();\n    } else {\n      history.push(\"/\");\n    }\n  };\n\n  // useEffect Hook to retrieve all existing decks\n  useEffect(() => {\n    const controller = new AbortController();\n    const signal = controller.signal;\n\n    listDecks(deckId, signal)\n      .then(setDecks)\n      .catch((error) => console.log(error));\n\n    return controller.abort();\n  }, [deckId, setDecks]);\n\n  const listOfDecks = decks.map((deck) => {\n    return <Deck key={deck.id} deck={deck} handleDelete={handleDelete} />;\n  });\n\n  return (\n    <div>\n      <Link to=\"/decks/new\">\n        <button type=\"button\" className=\"btn btn-secondary btn mb-2\">\n          + Create Deck\n        </button>\n      </Link>\n      <div>{listOfDecks}</div>\n    </div>\n  );\n};\n\nexport default DeckList;\n","import React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { updateCard, readDeck, readCard } from \"../../utils/api\";\nimport BreadCrumbs from \"../Breadcrumbs\";\nimport CardForm from \"../CardForm\";\n\n/**\n * Edit card screen is displayed at '/decks/:deckId/cards/:cardId/edit'\n * allows user to modify info on card\n * form is pre-filled w/info for existing card\n */\n\nconst EditCard = () => {\n  // initialize state + setter to hold deck name\n  const [deckName, setDeckName] = useState(\"\");\n  // initialize state + setter to hold front of card\n  const [front, setFront] = useState(\"\");\n  // initialize state + setter to hold back of card\n  const [back, setBack] = useState(\"\");\n\n  // retrieves deck w/specified `deckId`\n  const { deckId, cardId } = useParams();\n  const history = useHistory(); // create history obj\n\n  // use readDeck() to get deck of card to edit & set to state\n  useEffect(() => {\n    const abortController = new AbortController();\n    readDeck(deckId)\n      .then(async (data) => {\n        setDeckName(data.name);\n\n        // use readCard() to get card to edit & set to state\n        const card = await readCard(cardId);\n        const { back, front } = card;\n        setFront(front);\n        setBack(back);\n      })\n      .catch((error) => console.log(error));\n\n    return () => abortController.abort();\n  }, [deckId, cardId]);\n\n  // use updateCard() & func to handle submission of form to update card\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n\n    await updateCard(\n      { id: cardId, front, back, deckId: parseInt(deckId) },\n      signal\n    );\n\n    history.goBack();\n  };\n\n  // func to handle 'cancel' of form to update card\n  const handleCancel = () => {\n    history.goBack();\n  };\n\n  return (\n    <div>\n      <BreadCrumbs crumbs={[deckName, `Edit Card ${cardId}`]} />\n      <h2>Edit Card</h2>\n      <CardForm\n        handleSubmit={handleSubmit}\n        handleExit={handleCancel}\n        front={front}\n        setFront={setFront}\n        back={back}\n        setBack={setBack}\n        buttonTextOne={\"Cancel\"}\n        buttonTextTwo={\"Submit\"}\n      />\n    </div>\n  );\n};\n\nexport default EditCard;\n","import React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { readDeck, updateDeck } from \"../../utils/api\";\nimport BreadCrumbs from \"../Breadcrumbs\";\n\n/**\n * Edit deck screen is displayed at '/decks/:deckId/edit'\n * Allows user to modify info on an existing deck\n * Includes pre-filled form w/info for existing deck to edit\n */\n\nconst EditDeck = () => {\n  // initialize state + setter to hold deck name\n  const [deckName, setDeckName] = useState(\"\");\n  // initialize state + setter to hold deck description\n  const [deckDescription, setDeckDescription] = useState(\"\");\n\n  // retrieves deck w/specified `deckId`\n  const { deckId } = useParams();\n  const history = useHistory(); // create history obj\n\n  // use readDeck() to get deck & set states\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    readDeck(deckId)\n      .then((data) => {\n        setDeckName(data.name);\n        setDeckDescription(data.description);\n      })\n      .catch((error) => console.log(error));\n\n    return abortController.abort();\n  }, [deckId]);\n\n  // func to handle submission of form to update deck\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n\n    // response either shows true or false per user input\n    const response = await updateDeck(\n      { id: deckId, name: deckName, description: deckDescription },\n      signal\n    );\n    history.push(`/decks/${response.id}`);\n  };\n\n  // func to handle 'cancel' of form to update deck\n  const handleCancel = () => {\n    history.goBack();\n  };\n\n  return (\n    <div>\n      <BreadCrumbs crumbs={[deckName, \"Edit Deck\"]} />\n      <h2>Edit Deck</h2>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label>Name</label>\n          <input\n            className=\"form-control\"\n            type=\"text\"\n            name=\"name\"\n            value={deckName}\n            placeholder={\"Enter Deck Name\"}\n            onChange={(e) => setDeckName(e.target.value)}\n            required\n          />\n          <label className=\"mx-1 my-1\">Description</label>\n          <textarea\n            className=\"form-control\"\n            name=\"description\"\n            value={deckDescription}\n            placeholder=\"Brief Description of the deck\"\n            type=\"textarea\"\n            onChange={(e) => setDeckDescription(e.target.value)}\n            required\n          />\n          <div className=\"buttons my-2\">\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary mx-1\"\n              onClick={handleCancel}\n            >\n              Cancel\n            </button>\n            <button type=\"submit\" className=\"btn btn-primary\">\n              Submit\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default EditDeck;\n","import React from \"react\";\n\n// Header is displayed across all screens\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\n// Displays 'Not Found' msg if URL does not exist\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","import React, { useEffect, useState } from \"react\";\nimport { Link, useParams, useHistory } from \"react-router-dom\";\nimport { readDeck } from \"../../utils/api\";\nimport BreadCrumbs from \"../Breadcrumbs\";\n\n/**\n * Study deck screen is displayed at '/decks/:deckId/study'\n * Displays front & back of deck cards one at a time\n * Each card includes btns 'Flip' or 'Next'\n */\n\nconst StudyDeck = () => {\n  // initialize state + setter to hold deck\n  const [deck, setDeck] = useState({ name: \"\", cards: [] });\n  // initialize state + setter to hold card\n  const [selectedCard, setSelectedCard] = useState({ front: \"\", back: \"\" });\n  // initialize state + setter to hold flipped card\n  const [isFlipped, setIsFlipped] = useState(false);\n  // initialize state + setter to hold selected index card\n  const [selectedIndex, setSelectedIndex] = useState(0);\n\n  // retrieves deck w/specified `deckId`\n  const { deckId } = useParams();\n  const history = useHistory(); // create history obj\n\n  // use readDeck() to get deck being studied & set to state\n  useEffect(() => {\n    const abortController = new AbortController();\n    readDeck(deckId)\n      .then(setDeck)\n      .catch((error) => console.log(error));\n\n    return abortController.abort();\n  }, [deckId, setDeck]);\n\n  // get deck cards at indx & set to state\n  useEffect(() => {\n    if (deck.cards.length > 0) {\n      setSelectedCard(deck.cards[selectedIndex]);\n    }\n  }, [deck, selectedIndex]);\n\n  // display msg if deck includes 2 cards or less & btn to add cards to deck\n  if (deck.cards.length <= 2) {\n    return (\n      <div>\n        <BreadCrumbs crumbs={[deck.name, \"Study\"]} />\n        <h2>{deck.name} : Study</h2>\n        <h4>Not enough cards</h4>\n        <p>\n          You need at least 3 cards to study. There are {deck.cards.length}{\" \"}\n          cards in this deck.\n        </p>\n        <Link to={`/decks/${deckId}/cards/new`}>\n          <button className=\"btn btn-primary mr-2\">+ add cards</button>\n        </Link>\n      </div>\n    );\n  }\n\n  // front of the card\n  const frontCard = (\n    <div className=\"card-body\">\n      <h5 className=\"card-title\">\n        card {selectedIndex + 1} of {deck.cards.length}\n      </h5>\n      <p className=\"card-text\">{selectedCard.front}</p>\n      <button\n        type=\"button\"\n        className=\"btn btn-secondary mr-2\"\n        onClick={(e) => {\n          setIsFlipped(true);\n        }}\n      >\n        Flip\n      </button>\n    </div>\n  );\n\n  // back of the card\n  const backCard = (\n    <div className=\"card-body\">\n      <h5 className=\"card-title\">\n        card {selectedIndex + 1} of {deck.cards.length}\n      </h5>\n      <p className=\"card-text\">{selectedCard.back}</p>\n      <button\n        type=\"button\"\n        className=\"btn btn-secondary mr-2\"\n        onClick={(e) => {\n          if (selectedIndex + 1 !== deck.cards.length) {\n            setSelectedIndex(selectedIndex + 1);\n            setSelectedCard(deck.cards[selectedIndex + 1]);\n            setIsFlipped(false);\n          } else {\n            let response = window.confirm(\n              \"Restart cards? \\n Click 'cancel' to return to the home page.\"\n            );\n            if (response) {\n              setSelectedIndex(0);\n              setIsFlipped(false);\n            } else {\n              history.push(\"/\");\n            }\n          }\n        }}\n      >\n        Next\n      </button>\n    </div>\n  );\n\n  return (\n    <>\n      <BreadCrumbs crumbs={[deck.name, \"Study\"]} />\n      <h2>Study: {deck.name}</h2>\n      <div className=\"card w-60\">{isFlipped ? backCard : frontCard}</div>\n    </>\n  );\n};\n\nexport default StudyDeck;\n","import React from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { deleteCard } from \"../../utils/api\";\n\n/**\n * Cards of deck are displayed at View deck screen\n * Each card includes btns to 'Edit' & 'Delete' ard\n */\n\nconst Card = ({ card, deckId }) => {\n  // retreives card w/specified `cardId`\n  const history = useHistory(); // create hsitory obj\n\n  // Delete handler either deletes deck then reload OR sends user home\n  const handleDelete = async () => {\n    const message = \"Are you sure you want to delete?\";\n    const deleteCardPrompt = window.confirm(message);\n\n    if (deleteCardPrompt === true) {\n      (await deleteCard(card.id)) && window.location.reload();\n    } else {\n      history.push(\"/\");\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"card\">\n        <div className=\"card-body container d-flex justify-content-between\">\n          <div className=\"left-text col-6\">\n            <p className=\"card-text\">{card.front}</p>\n          </div>\n          <div className=\"right-text col-6\">\n            <p className=\"card-text\">{card.back}</p>\n            <div className=\"buttons\">\n              <Link to={`${deckId}/cards/${card.id}/edit`}>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-secondary float-right mr-2\"\n                >\n                  Edit\n                </button>\n              </Link>\n              <button\n                className=\"btn btn-danger float-right mr-2\"\n                onClick={handleDelete}\n              >\n                Delete\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useEffect, useState } from \"react\";\nimport { deleteDeck, readDeck } from \"../../utils/api\";\nimport { useHistory, useParams, Link } from \"react-router-dom\";\nimport Card from \"../Card\";\nimport BreadCrumbs from \"../Breadcrumbs\";\n\n/**\n * View deck screen is displayed at '/decks/:deckId'\n * Displays all of the info about a deck & cards\n * Includes 'Edit', 'Study', 'Add Cards' & 'Delete' btns\n */\n\nconst ViewDeck = () => {\n  // initial states + setter to hold the cards\n  const [cards, setCards] = useState([]);\n  // initial states + setter to hold selected deck name & description\n  const [deck, setDeck] = useState({ id: \"\", name: \"\", description: \"\" });\n  // destructuring id, name, description from deck\n  const { id, name, description } = deck;\n\n  // retrieves deck w/specified `deckId`\n  const { deckId } = useParams();\n  const history = useHistory(); // creates history obj\n\n  // func to handle delete for deck\n  const handleDelete = (id) => {\n    // response either shows true or false per user input\n    const response = window.confirm(\"Are you sure you want to delete?\");\n    if (response) {\n      deleteDeck(deckId);\n      history.push(\"/\");\n    }\n  };\n\n  // use readDeck() to get deck & set to state\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    readDeck(deckId)\n      .then(setDeck)\n      .catch((error) => console.log(error));\n\n    return abortController.abort();\n  }, [deckId, setDeck]);\n\n  // get deck cards & set to state\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    if (deck.cards) {\n      setCards(deck.cards);\n    }\n\n    return abortController.abort();\n  }, [deckId, setCards, deck]);\n\n  return (\n    <div className=\"mb-2\">\n      <BreadCrumbs crumbs={[name]} />\n      <h3>{name}</h3>\n      <p>{description}</p>\n      <Link to={`/decks/${deckId}/edit`}>\n        <button className=\"btn btn-secondary mr-2\">Edit</button>\n      </Link>\n      <Link to={`/decks/${deckId}/study`}>\n        <button className=\"btn btn-secondary mr-2\">Study</button>\n      </Link>\n      <Link to={`/decks/${deckId}/cards/new`}>\n        <button className=\"btn btn-secondary mr-2\">Add Cards</button>\n      </Link>\n      <button\n        className=\"btn btn-danger float-right margin-bottom\"\n        onClick={(e) => {\n          e.preventDefault();\n          handleDelete(id);\n        }}\n      >\n        Delete\n      </button>\n      <br />\n      <br />\n      <h4>Cards</h4>\n      <ul className=\"list-group\">\n        {cards.length &&\n          cards.map((card) => (\n            <Card\n              key={card.id}\n              card={card}\n              deckId={deckId}\n              handleDelete={handleDelete}\n            />\n          ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ViewDeck;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport AddCard from \"./components/AddCard\";\nimport CreateDeck from \"./components/CreateDeck\";\nimport DeckList from \"./components/DeckList\";\nimport EditCard from \"./components/EditCard\";\nimport EditDeck from \"./components/EditDeck\";\nimport Header from \"./components/Header\";\nimport NotFound from \"./components/NotFound\";\nimport StudyDeck from \"./components/StudyDeck\";\nimport ViewDeck from \"./components/ViewDeck\";\n\n// Flashcard app w/routes to different screens\nconst App = () => {\n  return (\n    <>\n      <Header />\n      <div className=\"container\">\n        <Switch>\n          <Route exact path=\"/\">\n            <DeckList />\n          </Route>\n          <Route exact path=\"/decks/new\">\n            <CreateDeck />\n          </Route>\n          <Route exact path=\"/decks/:deckId\">\n            <ViewDeck />\n          </Route>\n          <Route path=\"/decks/:deckId/edit\">\n            <EditDeck />\n          </Route>\n          <Route path=\"/decks/:deckId/study\">\n            <StudyDeck />\n          </Route>\n          <Route path=\"/decks/:deckId/cards/new\">\n            <AddCard />\n          </Route>\n          <Route path=\"/decks/:deckId/cards/:cardId/edit\">\n            <EditCard />\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}